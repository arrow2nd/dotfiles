#!/bin/bash

# say-vv - VOICEVOX用音声合成コマンド（バックグラウンド実行＆キューイング対応）

# 設定
VOICE_DIR="$HOME/.cache/voicevox"
VOICEVOX_URL="127.0.0.1:50021"
DEFAULT_VOICE_ID=61
DEFAULT_SPEED=1.0
QUEUE_DIR="$VOICE_DIR/queue"
LOCK_FILE="$VOICE_DIR/.say-vv.lock.d"
DAEMON_PID_FILE="$VOICE_DIR/.say-vv-daemon.pid"

# ヘルプ表示
show_help() {
    cat << EOF
使用方法: say-vv [オプション] "テキスト"

オプション:
  -v, --voice <id>    音声ID (デフォルト: $DEFAULT_VOICE_ID)
  -s, --speed <num>   話速 (デフォルト: $DEFAULT_SPEED)
  -l, --list          利用可能な音声一覧を表示
  -h, --help          このヘルプを表示

例:
  say-vv "こんにちは、世界"
  say-vv -v 3 "ずんだもんの声です"
  say-vv -s 1.5 "早口で話します"
  say-vv -v 8 -s 0.8 "春日部つむぎでゆっくり"
EOF
}

# 音声一覧表示
list_voices() {
    echo "利用可能な音声:"
    curl -s "$VOICEVOX_URL/speakers" | jq -r '
        .[] | 
        .name as $character | 
        .styles[] | 
        "  \($character) - \(.name) (ID: \(.id))"
    ' 2>/dev/null || {
        echo "エラー: VOICEVOX ENGINEに接続できません"
        exit 1
    }
}

# キューにタスクを追加
enqueue_task() {
    local text="$1"
    local voice_id="$2"
    local speed="$3"
    local timestamp=$(date +%s%N)
    local task_file="$QUEUE_DIR/$timestamp.json"
    
    mkdir -p "$QUEUE_DIR"
    
    # タスク情報をJSONで保存（jqで適切なエスケープ処理）
    jq -n \
        --arg text "$text" \
        --arg voice_id "$voice_id" \
        --arg speed "$speed" \
        --arg timestamp "$timestamp" \
        '{text: $text, voice_id: $voice_id, speed: $speed, timestamp: $timestamp}' \
        > "$task_file"
}

# デーモンが動作中かチェック
is_daemon_running() {
    if [[ -f "$DAEMON_PID_FILE" ]]; then
        local pid=$(cat "$DAEMON_PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

# デーモン起動
start_daemon() {
    if is_daemon_running; then
        return 0
    fi
    
    # バックグラウンドでデーモンを起動
    (
        echo $$ > "$DAEMON_PID_FILE"
        trap 'rm -f "$DAEMON_PID_FILE" "$LOCK_FILE"; exit' EXIT TERM INT
        
        while true; do
            # キューから最も古いタスクを取得
            local task_file=$(ls -1 "$QUEUE_DIR"/*.json 2>/dev/null | head -n1)
            
            if [[ -n "$task_file" ]]; then
                # ロックを取得（macOS用の代替実装）
                while ! mkdir "$LOCK_FILE" 2>/dev/null; do
                    sleep 0.05
                done
                
                # タスクファイルがまだ存在するか確認
                if [[ -f "$task_file" ]]; then
                    # タスク情報を読み込み
                    local task_data=$(cat "$task_file")
                    
                    # 処理済みタスクを削除（先に削除して重複処理を防ぐ）
                    rm -f "$task_file"
                    
                    # JSON解析
                    local text=$(echo "$task_data" | jq -r '.text')
                    local voice_id=$(echo "$task_data" | jq -r '.voice_id')
                    local speed=$(echo "$task_data" | jq -r '.speed')
                    
                    # 音声合成と再生
                    process_text "$text" "$voice_id" "$speed"
                fi
                
                # ロック解除
                rmdir "$LOCK_FILE" 2>/dev/null
            else
                # キューが空の場合は少し待機
                sleep 0.1
            fi
            
            # キューが空で、しばらく新しいタスクがない場合はデーモンを終了
            if [[ -z "$(ls -1 "$QUEUE_DIR"/*.json 2>/dev/null)" ]]; then
                sleep 2
                if [[ -z "$(ls -1 "$QUEUE_DIR"/*.json 2>/dev/null)" ]]; then
                    break
                fi
            fi
        done
        
        rm -f "$DAEMON_PID_FILE"
    ) &
    
    # デーモンの起動を少し待つ
    sleep 0.1
}

# テキスト処理（音声合成と再生）
process_text() {
    local text="$1"
    local voice_id="$2"
    local speed="$3"
    local work_dir="$VOICE_DIR/work_$$"
    
    # 作業ディレクトリ作成
    mkdir -p "$work_dir"
    
    # テキストファイルに出力
    echo -n "$text" > "$work_dir/text.txt"
    
    # VoiceVox APIに音声クエリを送信
    curl -s \
        -X POST \
        "$VOICEVOX_URL/audio_query?speaker=$voice_id" \
        --get --data-urlencode text@"$work_dir/text.txt" \
        > "$work_dir/query.json"
    
    # クエリが正常に作成されたかチェック
    if [[ ! -f "$work_dir/query.json" ]] || [[ ! -s "$work_dir/query.json" ]]; then
        echo "エラー: 音声クエリの作成に失敗しました" >&2
        rm -rf "$work_dir"
        return 1
    fi
    
    # 話速調整
    if [[ "$speed" != "$DEFAULT_SPEED" ]]; then
        sed -i.bak -E "s/\"speedScale\":[0-9.]+/\"speedScale\":$speed/" "$work_dir/query.json"
    fi
    
    # 音声合成
    curl -s \
        -H "Content-Type: application/json" \
        -X POST \
        -d @"$work_dir/query.json" \
        "$VOICEVOX_URL/synthesis?speaker=$voice_id" \
        > "$work_dir/audio.wav"
    
    # 音声再生
    if [[ -f "$work_dir/audio.wav" ]] && [[ -s "$work_dir/audio.wav" ]]; then
        # WAVヘッダーをチェック
        local header=$(head -c 4 "$work_dir/audio.wav" 2>/dev/null)
        if [[ "$header" == "RIFF" ]]; then
            afplay "$work_dir/audio.wav"
        else
            echo "エラー: 不正な音声ファイルが生成されました" >&2
            rm -rf "$work_dir"
            return 1
        fi
    else
        echo "エラー: 音声ファイルの生成に失敗しました" >&2
        rm -rf "$work_dir"
        return 1
    fi
    
    # クリーンアップ
    rm -rf "$work_dir"
}

# メイン処理
main() {
    local text=""
    local voice_id=$DEFAULT_VOICE_ID
    local speed=$DEFAULT_SPEED
    
    # オプション解析
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--voice)
                voice_id="$2"
                shift 2
                ;;
            -s|--speed)
                speed="$2"
                shift 2
                ;;
            -l|--list)
                list_voices
                exit 0
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                text="$*"
                break
                ;;
        esac
    done
    
    # 引数チェック
    if [[ -z "$text" ]]; then
        echo "エラー: テキストが指定されていません"
        echo ""
        show_help
        exit 1
    fi
    
    # キューにタスクを追加
    enqueue_task "$text" "$voice_id" "$speed"
    
    # デーモンを起動（既に起動していれば何もしない）
    start_daemon
    
    # すぐに制御を返す
    exit 0
}

# スクリプト実行
main "$@"
